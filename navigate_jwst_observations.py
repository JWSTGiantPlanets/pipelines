#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script to add navigation data backplanes (generated by JWSTSolarSystemPointing) to FITS 
files of JWST observations.

This script uses SPICE kernels, so you may need to change KERNEL_DIR or the values in
KERNEL_NAMES to work for your observations. You can also set the 
PLANETMAPPER_KERNEL_PATH environment variable to point to the directory containing the
SPICE kernels instead.

Note that the JWST kernels are updated regularly, so make sure you have the latest 
versions from https://naif.jpl.nasa.gov/pub/naif/JWST/kernels/spk/ in your KERNEL_DIR.
You should also remove any old versions of the JWST kernels from KERNEL_DIR so that they
are not loaded instead. You can set the RA/Dec offsets in arcseconds by changing the 
values of RA_OFFSET and DEC_OFFSET below.

It is also possible to change the kernel directory and RA/Dec offsets using command line
arguments. Run

>>> python3 navigate_jwst_observations.py -h

to get a list of different argument options.


Example usage
-------------

>>> python3 navigate_jwst_observations.py data/stage3/*_s3d.fits

The output file paths will be of the format data/stage3_nav/*_s3d_nav.fits.


If you want to add any RA/Dec offsets, you can use the -r and -d flags. For example, the
following command will add an RA offset of +1 arcsec and a Dec offset of -2.5 arcsec:

>>> python3 navigate_jwst_observations.py -r 1 -d -2.5 data/stage3/*_s3d.fits


The kernel directory can also be customised with the -k flag:

>>> python3 navigate_jwst_observations.py -k /data/nemesis/jwst/scripts/kernels data/stage3/*_s3d.fits
"""
import argparse
import datetime
import glob
import os
import pathlib
import sys
import warnings

import spiceypy as spice
import tqdm
from astropy.io import fits

import jwst_navigator

KERNEL_DIR = os.environ.get('PLANETMAPPER_KERNEL_PATH', '~/spice_kernels')
if sys.platform == 'linux' and 'PLANETMAPPER_KERNEL_PATH' not in os.environ:
    # Try to set the kernel path automatically when running on ALICE
    KERNEL_DIR = '/data/nemesis/jwst/scripts/kernels'


KERNEL_NAMES = [
    'naif0012.tls',
    'pck00010.tpc',
    'de430.bsp',
    'jup344.bsp',
    'jup365.bsp',
    'sat415.bsp',
    'sat425.bsp',
    'ura115.bsp',
    'nep095.bsp',
    'jwst_rec.bsp',
    'jwst_pred.bsp',
]

JWST_RECORDED_KERNEL = 'jwst_rec.bsp'

# RA/Dec offsets in arcseconds
RA_OFFSET = 0
DEC_OFFSET = 0


def navigate_multiple(*paths: str, **kw) -> None:
    print(f'{len(paths)} files to navigate...')
    for k in ['ra_offset', 'dec_offset']:
        if kw.get(k, None):
            print(f'Using {k} = {kw[k]}')

    dates = []
    with warnings.catch_warnings():
        # Hide warnings caused by NaN values in observations which include the
        # background sky
        warnings.filterwarnings('ignore', 'invalid value encountered in')

        for path in tqdm.tqdm(paths):
            dates.append(navigate_file(path, **kw))

    print(f'Saved backplane data for {len(paths)} files')
    bad_dates = sum(d > get_latest_jwst_recorded_kernel_date() for d in dates)
    if bad_dates:
        print(f'WARNING: {bad_dates} files were navigated using predicted JWST kernels')


def navigate_file(
    path: str,
    ra_offset: float = RA_OFFSET,
    dec_offset: float = DEC_OFFSET,
    basic: bool = False,
) -> datetime.datetime:
    path = os.path.abspath(path)

    if basic:
        navigator = jwst_navigator.BasicNavigator(
            path, radec_offset=(ra_offset, dec_offset)
        )
    else:
        navigator = jwst_navigator.SolarSystemBodyNavigator(
            path, radec_offset=(ra_offset, dec_offset)
        )

    navigator.full_fov()  # Generate backplanes
    with fits.open(path) as hdul:
        for key in navigator.keys:
            data = navigator.get_param(key)
            header = fits.Header()
            header.add_comment(f'Backplane generated by {navigator.__class__.__name__}')
            hdu = fits.ImageHDU(data=data, header=header, name=key)
            hdul.append(hdu)

        header = hdul['PRIMARY'].header  # Â type: ignore
        sep = 'Navigation metadata'
        sep = ' ' * 72 + sep + ' ' * (72 * 2 - len(sep))
        header.append(('', sep), useblanks=False, bottom=True)
        date = datetime.datetime.now().isoformat()
        header.append(('HIERARCH NAV DATE', date), useblanks=False, bottom=True)
        header.append(
            (
                'HIERARCH NAV CLASS',
                navigator.__class__.__name__,
                'Navigator class',
            )
        )
        header.append(('HIERARCH NAV BASIC', basic, 'Basic navigation used'))
        kernel_date = get_latest_jwst_recorded_kernel_date().isoformat()
        header.append(
            (
                'HIERARCH NAV REC_KERNEL_DATE',
                kernel_date,
                'Latest recorded ephemeris',
            )
        )
        header.append(
            ('HIERARCH NAV RA_OFFSET', ra_offset, '[arcsec] Manual RA offset')
        )
        header.append(
            ('HIERARCH NAV DEC_OFFSET', dec_offset, '[arcsec] Manual Dec offset')
        )

        date_end = datetime.datetime.strptime(
            header['DATE-END'], '%Y-%m-%dT%H:%M:%S.%f'
        )

        path_out = make_output_path(path)
        check_path(path_out)
        hdul.writeto(path_out, overwrite=True)
    return date_end


def make_output_path(path: str) -> str:
    directory_path, filename = os.path.split(path)
    root, directory = os.path.split(directory_path)
    directory = directory + '_nav'
    filename = filename.replace('.fits', '_nav.fits')
    return os.path.join(root, directory, filename)


def load_kernels(kerneldir=KERNEL_DIR) -> None:
    kerneldir = os.path.expanduser(kerneldir)

    for fn in KERNEL_NAMES:
        spice.furnsh(glob.glob(os.path.join(kerneldir, '**', fn), recursive=True))

    date = get_latest_jwst_recorded_kernel_date(kerneldir)
    print(f'Latest recorded ephemeris data from {JWST_RECORDED_KERNEL}: {date}')


# pylint: disable=protected-access
def get_latest_jwst_recorded_kernel_date(kerneldir=KERNEL_DIR) -> datetime.datetime:
    if get_latest_jwst_recorded_kernel_date._date is None:
        kerneldir = os.path.expanduser(kerneldir)
        paths = sorted(
            glob.glob(
                os.path.join(kerneldir, '**', JWST_RECORDED_KERNEL), recursive=True
            )
        )
        handle = spice.dafopr(paths[0])

        success = False
        comments = []
        while not success:
            n, c, success = spice.dafec(handle, 100)
            comments.extend(c[:n])  # type: ignore

        times = [
            c.split('=')[1].strip()
            for c in comments
            if c.strip().startswith('END_TIME')
        ]
        fmt = '%Y %b %d %H:%M:%S.%f'
        dtms = [datetime.datetime.strptime(t, fmt) for t in times]
        get_latest_jwst_recorded_kernel_date._date = max(dtms)
    return get_latest_jwst_recorded_kernel_date._date


get_latest_jwst_recorded_kernel_date._date = None
# pylint: enable=protected-access


def check_path(path) -> None:
    """
    Checks if file path's directory tree exists, and creates it if necessary.

    Assumes path is to a file if `os.path.split(path)[1]` contains '.',
    otherwise assumes path is to a directory.

    Parameters
    ----------
    path : str
        Path to directory to check.
    """
    if os.path.isdir(path):
        return
    if '.' in os.path.split(path)[1]:
        path = os.path.split(path)[0]
        if os.path.isdir(path):
            return
    if path == '':
        return
    print('Creating directory path "{}"'.format(path))
    pathlib.Path(path).mkdir(parents=True, exist_ok=True)


def main() -> None:
    parser = argparse.ArgumentParser(description='Navigate JWST cubes')
    parser.add_argument(
        'paths',
        metavar='path',
        type=str,
        nargs='*',
        help='Paths of stage3 ..._s3d.fits JWST files to navigate',
    )
    parser.add_argument(
        '-r',
        '--ra_offset',
        default=RA_OFFSET,
        type=float,
        help='Pointing offset to RA in arcseconds',
        dest='ra_offset',
    )
    parser.add_argument(
        '-d',
        '--dec_offset',
        default=DEC_OFFSET,
        type=float,
        help='Pointing offset to Dec in arcseconds',
        dest='dec_offset',
    )
    parser.add_argument(
        '-k',
        '--kernel_dir',
        default=KERNEL_DIR,
        type=str,
        help='Directory path containing SPICE kernels',
    )
    args = vars(parser.parse_args())

    load_kernels(args['kernel_dir'])
    navigate_multiple(
        *args['paths'], ra_offset=args['ra_offset'], dec_offset=args['dec_offset']
    )


if __name__ == '__main__':
    main()
